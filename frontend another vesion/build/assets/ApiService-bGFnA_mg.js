var y=Object.defineProperty;var S=(e,t,o)=>t in e?y(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o;var f=(e,t,o)=>S(e,typeof t!="symbol"?t+"":t,o);const c=class c{static getInstance(){return c.instance||(c.instance=new c),c.instance}generateTraceId(){return"err_"+Date.now().toString(36)+Math.random().toString(36).substr(2,9)}showUserMessage(t,o="error"){console.log(`[${o.toUpperCase()}]: ${t}`),o==="error"&&alert(t)}handleApiError(t,o){console.error("API Error:",t);const s={error:"unknown_error",message:"An unexpected error occurred",code:500,timestamp:new Date().toISOString(),trace_id:this.generateTraceId()};if(t instanceof Response){const a=t.headers.get("X-Trace-Id")||this.generateTraceId();return{error:"http_error",message:t.statusText||"HTTP Error",code:t.status,timestamp:new Date().toISOString(),trace_id:a}}else{if(t instanceof Error)return{...s,message:t.message,error:"client_error"};if(typeof t=="object"&&t!==null)return{...s,...t}}return s}handleAuthError(){console.warn("Authentication error - redirecting to login"),localStorage.removeItem("authToken"),localStorage.removeItem("user"),sessionStorage.clear(),window.location.href="/login"}handlePermissionError(t="You do not have permission for this action"){console.warn("Permission error:",t),this.showUserMessage(t,"error")}handleValidationError(t){console.warn("Validation error:",t);const o={};if(Array.isArray(t)?t.forEach(s=>{s.field&&s.error&&(o[s.field]=s.error)}):typeof t=="object"&&Object.keys(t).forEach(s=>{o[s]=t[s]}),Object.keys(o).length>0){const s=Object.values(o)[0];this.showUserMessage(s,"error")}return o}handleRateLimitError(t){console.warn(`Rate limit exceeded. Retry after ${t} seconds`);const o=`Too many requests. Please try again in ${t} seconds.`;this.showUserMessage(o,"warning")}handleNetworkError(){console.warn("Network error occurred"),this.showUserMessage("Network connection failed. Please check your internet connection and try again.","error")}handleOfflineError(){console.warn("Application is offline"),this.showUserMessage("You are currently offline. Some features may be unavailable.","warning")}reportError(t,o){const s={id:this.generateTraceId(),error:t,context:o||{component:"Unknown",action:"Unknown",timestamp:new Date,userAgent:navigator.userAgent,route:window.location.pathname},stackTrace:t.stack,reportedAt:new Date};console.log("Reporting error:",s)}processError(t,o){var s;if(t instanceof Response){const a=this.handleApiError(t,o);switch(a.code){case 401:this.handleAuthError();break;case 403:this.handlePermissionError(a.message);break;case 422:a.details&&this.handleValidationError(a.details);break;case 429:const n=((s=a.details)==null?void 0:s.retryAfter)||60;this.handleRateLimitError(n);break;case 500:this.showUserMessage("An unexpected server error occurred. Please try again later.","error");break;default:this.showUserMessage(a.message,"error")}return a}else return this.handleApiError(t,o)}};f(c,"instance");let m=c;const d="";async function r(e,t={}){console.log(`Requesting path: ${e}`);const o=localStorage.getItem("authToken");console.log(`Token from localStorage: ${o}`);const s={"Content-Type":"application/json",...t.headers||{}};o?(s.Authorization=`Bearer ${o}`,console.log(`Authorization header set: Bearer ${o.substring(0,10)}...`)):console.log("No token found in localStorage");const a=e.startsWith("/api/v1")?e:`/api/v1${e.startsWith("/")?e:"/"+e}`;console.log(`API Request: ${d}${a}`),console.log(`Token: ${o}`),console.log("Headers:",s);try{const n=await fetch(`${d}${a}`,{...t,headers:s});console.log(`Response status: ${n.status}`),console.log("Response headers:",[...n.headers.entries()]);let i,l=null;try{i=await n.json()}catch{try{i=await n.text()}catch{i="Unable to parse response"}}if(console.log("Response data:",i),!n.ok){let u="Unknown error occurred";typeof i=="object"&&i!==null?u=i.detail||i.message||JSON.stringify(i):typeof i=="string"&&(u=i),console.log(`API Error Response: ${n.status} - ${u}`);const h=m.getInstance().processError(n,{component:"ApiService",action:`${t.method||"GET"} ${e}`,timestamp:new Date,userAgent:navigator.userAgent,route:window.location.pathname});throw new Error(`API ${n.status}: ${h.message}`)}return i}catch(n){throw n instanceof TypeError&&n.message==="Failed to fetch"?(m.getInstance().handleNetworkError(),new Error("Network error - please check your connection")):n}}const p={login:(e,t)=>r("/auth/login",{method:"POST",body:JSON.stringify({username:e,password:t})}).then(o=>(console.log("Storing auth token:",o.access_token),localStorage.setItem("authToken",o.access_token),localStorage.setItem("user",JSON.stringify(o.user)),console.log("Token stored in localStorage"),o)),dummyLogin:(e,t)=>{const o=new URLSearchParams({username:e,password:t});return r(`/auth/login/dummy?${o}`,{method:"POST"}).then(s=>{if(s.success)return console.log("Storing dummy auth token:",s.access_token),localStorage.setItem("authToken",s.access_token),localStorage.setItem("user",JSON.stringify(s.user)),console.log("Dummy token stored in localStorage"),s;throw new Error("Dummy login failed")})},register:e=>r("/auth/register",{method:"POST",body:JSON.stringify(e)}),getMe:()=>r("/auth/me"),logout:()=>{localStorage.removeItem("authToken"),localStorage.removeItem("user")}},$={list:(e=100,t=0,o,s)=>{let a=`/farmers?limit=${e}&offset=${t}`;return o&&(a+=`&search=${encodeURIComponent(o)}`),s&&(a+=`&status=${s}`),r(a)},get:e=>r(`/farmers/${e}`),create:e=>r("/farmers",{method:"POST",body:JSON.stringify(e)}),update:(e,t)=>r(`/farmers/${e}`,{method:"PUT",body:JSON.stringify(t)}),delete:e=>r(`/farmers/${e}`,{method:"DELETE"}),updateKYC:(e,t,o)=>r(`/farmers/${e}/kyc`,{method:"PATCH",body:JSON.stringify({status:t,reason:o})}),updateStatus:(e,t)=>r(`/farmers/${e}/status`,{method:"PUT",body:JSON.stringify(t)}),uploadKYCDocument:async(e,t,o)=>{const s=new FormData;s.append("file",t),s.append("doc_type",o);const a=localStorage.getItem("authToken"),n=await fetch(`${d}/farmers/${e}/kyc-upload`,{method:"POST",headers:{...a?{Authorization:`Bearer ${a}`}:{}},body:s});if(!n.ok){let i;try{const l=await n.json();i=l.detail||l.message||JSON.stringify(l)}catch{try{i=await n.text()}catch{i="Upload failed with unknown error"}}throw new Error(`Upload failed: ${i}`)}return n.json()}},w={list:(e=100,t=0,o,s)=>{let a=`/collections?limit=${e}&offset=${t}`;return o&&(a+=`&farmer_id=${o}`),s&&(a+=`&staff_id=${s}`),r(a)},get:e=>r(`/collections/${e}`),create:e=>r("/collections",{method:"POST",body:JSON.stringify(e)}),update:(e,t)=>r(`/collections/${e}`,{method:"PUT",body:JSON.stringify(t)}),delete:e=>r(`/collections/${e}`,{method:"DELETE"}),createBulk:e=>r("/collections/bulk",{method:"POST",body:JSON.stringify(e)}),downloadReceipt:async e=>{const t=localStorage.getItem("authToken"),o=await fetch(`${d}/collections/${e}/receipt`,{headers:{...t?{Authorization:`Bearer ${t}`}:{}}});if(!o.ok){let s;try{const a=await o.json();s=a.detail||a.message||JSON.stringify(a)}catch{try{s=await o.text()}catch{s="Receipt download failed with unknown error"}}throw new Error(`Receipt download failed: ${s}`)}return o.blob()},uploadPhoto:async(e,t)=>{const o=new FormData;o.append("file",t);const s=localStorage.getItem("authToken"),a=await fetch(`${d}/collections/${e}/photo`,{method:"POST",headers:{...s?{Authorization:`Bearer ${s}`}:{}},body:o});if(!a.ok){let n;try{const i=await a.json();n=i.detail||i.message||JSON.stringify(i)}catch{try{n=await a.text()}catch{n="Photo upload failed with unknown error"}}throw new Error(`Photo upload failed: ${n}`)}return a.json()}},P={list:(e=100,t=0,o)=>{let s=`/payments?limit=${e}&offset=${t}`;return o&&(s+=`&farmer_id=${o}`),r(s)},get:e=>r(`/payments/${e}`),create:e=>r("/payments",{method:"POST",body:JSON.stringify(e)}),update:(e,t)=>r(`/payments/${e}`,{method:"PUT",body:JSON.stringify(t)}),delete:e=>r(`/payments/${e}`,{method:"DELETE"}),getProjections:e=>r(`/farmers/${e}/payments/projections`),getHistory:(e,t)=>{const o=new URLSearchParams;t&&Object.entries(t).forEach(([a,n])=>{n!=null&&o.append(a,n.toString())});const s=o.toString();return r(`/farmers/${e}/payments${s?`?${s}`:""}`)}},T={submit:e=>r("/collections/dispute",{method:"POST",body:JSON.stringify(e)}),get:e=>r(`/collections/dispute/${e}`)},O={list:e=>{let t="/cows";return e&&(t+=`?farmer_id=${e}`),r(t)},get:e=>r(`/cows/${e}`),create:e=>r("/cows",{method:"POST",body:JSON.stringify(e)}),update:(e,t)=>r(`/cows/${e}`,{method:"PUT",body:JSON.stringify(t)}),delete:e=>r(`/cows/${e}`,{method:"DELETE"})},E={list:()=>r("/staff"),get:e=>r(`/staff/${e}`),create:e=>r("/staff",{method:"POST",body:JSON.stringify(e)}),update:(e,t)=>r(`/staff/${e}`,{method:"PUT",body:JSON.stringify(t)}),delete:e=>r(`/staff/${e}`,{method:"DELETE"})},k={getDashboardStats:()=>(console.log("Fetching dashboard stats"),r("/analytics/dashboard")),getAdminDashboard:(e="30days",t="all")=>{let o=`/admin/analytics/dashboard?period=${e}&region=${t}`;return r(o)}},b={getSystemConfig:()=>r("/admin/config"),updatePricingConfig:e=>r("/admin/config/pricing",{method:"PUT",body:JSON.stringify(e)}),updateQualityStandards:e=>r("/admin/config/quality-standards",{method:"PUT",body:JSON.stringify(e)}),updateNotificationSettings:e=>r("/admin/config/notifications",{method:"PUT",body:JSON.stringify(e)}),updateIntegrationSettings:e=>r("/admin/config/integrations",{method:"PUT",body:JSON.stringify(e)})},A={list:(e=1,t=!0)=>{let o=`/notifications?page=${e}`;return t&&(o+=`&unread_only=${t}`),r(o)},markAsRead:e=>r(`/notifications/${e}/read`,{method:"POST"}),markAllAsRead:()=>r("/notifications/read-all",{method:"POST"}),getPreferences:()=>r("/notifications/preferences"),updatePreferences:e=>r("/notifications/preferences",{method:"PUT",body:JSON.stringify(e)}),delete:e=>r(`/notifications/${e}`,{method:"DELETE"}),deleteAllRead:()=>r("/notifications/delete-all-read",{method:"DELETE"})},N={sendMessage:(e,t,o)=>r("/chat",{method:"POST",body:JSON.stringify({message:e,context:t,session_id:o})})},I={send:e=>r("/messages",{method:"POST",body:JSON.stringify(e)}),list:(e,t=50,o=0)=>r(`/messages?user_id=${e}&limit=${t}&offset=${o}`),markAsRead:e=>r(`/messages/${e}/read`,{method:"PUT"})},J={list:(e=1,t="all",o="active",s="")=>{let a=`/admin/users?page=${e}`;return t!=="all"&&(a+=`&role=${t}`),o!=="all"&&(a+=`&status=${o}`),s&&(a+=`&search=${encodeURIComponent(s)}`),r(a)},get:e=>r(`/admin/users/${e}`),create:e=>r("/admin/users",{method:"POST",body:JSON.stringify(e)}),updatePermissions:(e,t)=>r(`/admin/users/${e}/permissions`,{method:"PUT",body:JSON.stringify(t)}),updateStatus:(e,t)=>r(`/admin/users/${e}/status`,{method:"PUT",body:JSON.stringify({status:t})}),delete:e=>r(`/admin/users/${e}`,{method:"DELETE"}),getAuditLogs:(e,t=50)=>r(`/admin/users/${e}/audit-logs?limit=${t}`),resetPassword:e=>r(`/admin/users/${e}/reset-password`,{method:"POST"}),getRolesAndPermissions:()=>r("/admin/users/roles-permissions")},R={uploadImage:async(e,t="images")=>{const o=new FormData;o.append("file",e),o.append("folder",t);const s=localStorage.getItem("authToken"),a=await fetch(`${d}/upload/image`,{method:"POST",headers:{...s?{Authorization:`Bearer ${s}`}:{}},body:o});if(!a.ok){const n=await a.text();throw new Error(`Image upload failed: ${n}`)}return a.json()},uploadDocument:async(e,t="documents")=>{const o=new FormData;o.append("file",e),o.append("folder",t);const s=localStorage.getItem("authToken"),a=await fetch(`${d}/upload/document`,{method:"POST",headers:{...s?{Authorization:`Bearer ${s}`}:{}},body:o});if(!a.ok){const n=await a.text();throw new Error(`Document upload failed: ${n}`)}return a.json()}},D={generateDailyRoute:(e,t)=>r(`/routes/staff/${e}/routes/daily?route_date=${t}`),getStaffRouteHistory:(e,t=30)=>r(`/routes/staff/${e}/routes/history?days=${t}`),assignFarmersToStaff:(e,t)=>r(`/routes/staff/${e}/routes/assign-farmers`,{method:"POST",body:JSON.stringify({farmer_ids:t})}),startRouteExecution:(e,t)=>r(`/routes/routes/${e}/start`,{method:"POST",body:JSON.stringify({staff_id:t})}),completeRouteExecution:(e,t)=>r(`/routes/routes/${e}/complete`,{method:"POST",body:JSON.stringify({staff_id:t})}),recordGPSTrackPoint:(e,t,o)=>r(`/routes/routes/${e}/track`,{method:"POST",body:JSON.stringify({staff_id:t,location:o})}),getTrackingSession:e=>r(`/routes/staff/${e}/tracking/session`),assignFarmersBulk:e=>r("/admin/routes/assign-farmers",{method:"POST",body:JSON.stringify({assignments:e})}),generateDailyRoutesForAll:e=>r("/admin/routes/generate-daily",{method:"POST",body:JSON.stringify({route_date:e})}),adjustRoute:(e,t)=>r(`/admin/routes/${e}/adjust`,{method:"PUT",body:JSON.stringify(t)}),createRouteTemplate:e=>r("/admin/routes/templates",{method:"POST",body:JSON.stringify(e)}),listRouteTemplates:()=>r("/admin/routes/templates"),optimizeRoute:(e,t)=>r(`/admin/routes/${e}/optimize`,{method:"PUT",body:JSON.stringify({optimization_criteria:t})}),getStaffRoutes:e=>r(`/routes/staff/${e}/routes`),startRoute:(e,t)=>r(`/routes/${e}/start`,{method:"POST",body:JSON.stringify({staff_location:t})})},U={check:()=>r("/health")},x={Auth:p,Farmers:$,Collections:w,Payments:P,Dispute:T,Cows:O,Staff:E,Analytics:k,Config:b,Users:J,Notifications:A,Chat:N,File:R,Routes:D,Messages:I,Health:U};export{N as C,$ as F,P,D as R,x as a,w as b};
